
正则表达式

动机
    1. 文本处理已经成为计算机常见工作之一
    2. 对文本内容的搜索，定位提取是逻辑比较复杂的工作
    3. 为了快速解决上述问题，产生了正则表达式技术

定义
    即文本的高级匹配模式，提供搜索替代等功能，其本质是一系列由特殊符号
    组成的字串，这个字串加正则表达式。


匹配原理
    由普通字符和特殊符号组成字符串，通过描述字符的重复和位置等行为达到匹配某一类
    字符串的目的


目标
    1. 熟练掌握正则表达式符号
    2. 实现基本的文本搜索，定位，提取，理解正则用法
    3. 能够使用re模块操作正则表达式

特点
    * 方便文本处理
    * 支持语言众多
    * 使用灵活多样


python -- re模块
    re.findall(pattern, string)
        功能
            使用正则表达式匹配目标字符串内容
        参数
            pattern 匹配模式，正则表达式
            string  目标字符串
        返回值
            列表，列表中为匹配到的内容


元字符的使用
    1. 普通字符
        元字符： 普通的字符
        匹配规则: 每个字符匹配对应的字符

    2. 或
        元字符： |
        匹配规则： 匹配'|'两边任意一个正则表达式

    3. 匹配单个字符
        元字符： .
        匹配字符： 匹配除换行外的任意一个字符

    4. 匹配开始位置
        元字符： ^
        匹配规则： 匹配目标字符串的开头位置

    5. 匹配结束位置
        元字符： $
        匹配规则： 匹配字符串的结束位置

    6. 匹配重复
        元字符： *
        匹配规则： 匹配前面的字符出现0次或多次
        例如
            fo* ---> fooooo  f(0次，o出现0次)  fo

    7. 匹配重复
        元字符： +
        匹配规则： 匹配前面的字符出现1次或多次
        例如：
            fo+  ----> fo, fooooo

    8. 匹配重复
        元字符： ?
        匹配规则： 匹配前面的字符出现1次或0次

    9. 匹配重复
        元字符： {n}
        匹配规则： 匹配指定的重复次数

    10. 匹配重复
        元字符： {m, n}
        匹配规则： 匹配前面的正则表达式[m, n]次，m到n次

    11. 匹配字符集合
        元字符： [字符集]
        匹配规则: 匹配任意一个字符集中的字符
        例如：
            [358], [a-z], [A-Z], [0-9], [_123a-z]

    12. 匹配字符集
        元字符： [^...]
        匹配规则: 字符集取非，除了列出的字符之外任意字符
        例如：
            [^abc]: 除 a b c 之外任意字符

    13. 匹配任意数字字符
        元字符： \d  \D
        匹配规则：
                \d: 匹配任意数字字符
                \D: 匹配任意非数字字符

    14. 匹配任意普通字符
        元字符： \w  \W
        匹配规则：
            \w: 普通字符  [_0-9A-Za-z], 也能匹配普通汉字
            \W： 非普通字符

    15. 匹配任意空字符
        元字符： \s \S
        匹配规则：
            \s 匹配任意空字符    [ \r\t\n\v\f]
            \S 匹配任意非空字符

    16. 匹配字符串位置
        元字符： \A  \Z
        匹配规则
            \A  匹配字符串开头位置   ---  ^
            \Z  匹配字符串结尾位置   ---  $

绝对匹配：
    正则表达式要完全匹配目标字符串内容
    在正则表达式的开始和结束位置分别加上^, $，这样正则表达式必须完全匹配全部
    目标字符串才会有结果
    例如：
        findall('^\d+$', '123124')

    17. 匹配单词边界
        元字符: \b \B
        匹配字符:
            \b: 匹配单词边界位置
            \B: 匹配非单词边界位置
        单词边界
            普通字符和非普通字符交界认为是单词交界

元字符总结
    匹配单个字符
        . \d \D \s \S [] [^]
    匹配重复
        * + ? {n} {m,n}
    匹配位置
        ^ $ \A \Z \b \B
    其他
        |  ()  \


正则表达式转义
    特殊字符
    . * + ? ^ $ () {} [] |

正则表达式如果匹配特殊字符需要加\表达转义

raw字串： 原始字符串对内容不解释转义，表达内容原本的意义


贪婪匹配和非贪婪匹配
    贪婪模式
        正则表达式的重复匹配总是尽可能多的向后匹配更多内容
            * + ? {m,n}
    非贪婪
        尽可能少的匹配内容
            *?  +?  ??  {m,n}?


正则表达式的子组
    可以使用()为正则表达式建立子组，子组可以看做是正则表达式内部操作的一个整体
    * 子组是在正则表达式整体匹配到内容的前提下才会发挥作用，它不影响正则表达式整体去
        匹配目标内容这一原则

    子组的作用
        1. 作为内部整体可以改变某些元字符的匹配行为
            res = re.search(r'\S+@\S+\.(cn|com)', 'xxx@qq.com, xxx@qq.cn').group()

        2. 子组在某些操作中可以单独提取出匹配内容
            res = re.search(r'\S+@\S+\.(cn|com)', 'xxx@qq.com, xxx@qq.cn').group(1)

    子组使用注意事项
        1. 一个正则表达式中可以有多个子组
        2. 子组一般由外到内，由左到右，称之为第一第二第三子组
        3. 子组不能重叠，嵌套也不宜很复杂

    子组分类
        捕获组: (?P<name>pattern)
            例如:
                res = re.search(r'(?P<dog>ab)cdef', 'abcdefg').group('dog')
            作用：
                可以通过组名更方便的获取某组的内容
        非捕获组:


正则表达式设计原则
    1. 正确性
        正确匹配到目标内容
    2. 排他性
        除了要匹配到的内容尽可能不会匹配到其他内容
    3. 全面性
        需要对目标的各种情况进行考虑做到不宜漏

re模块
    compile(pattern, flags=0)
        功能：
            生成正则表达式对象
        参数
            pattern  正则表达式
            flags  功能标志位，丰富正则表达式的匹配功能， 默认为0
        返回值
            返回正则表达式对象


###
    re.findall(pattern, string, flags)
        功能
            查找正则匹配内容
        参数
            pattern 正则表达式
            string  目标字符串
            flags  标志位
        返回值
            返回匹配到的内容
            如果正则有子组，则之返回子组匹配到的内容

###
    regex.findall(string, pos, endpos)
        功能
            查找正则匹配内容
        参数
            string  目标字符串
            pos 匹配目标的起始位置
            endpos 匹配目标的终止位置
        返回值
            返回匹配到的内容
            如果正则有子组，则之返回子组匹配到的内容

###
    re.split(pattern, string, flags=0)
        功能：
            根据正则表达式匹配的内容切割字符串
        参数
           pattern 正则表达式
            string  目标字符串
            flags  标志位
        返回值
            返回列表，列表中为切割的内容

###
    re.sub(pattern, replaceStr, string, max, flags=0)
        功能：
            替换正则匹配到的目标字串部分
        参数
           pattern 正则表达式
           replaceStr  要替换的内容
           string  目标字符串
           max 最多替换几处
           flags  标志位
        返回值
            返回替换后的字符串

###
    re.subn
        功能、参数和sub一样
        返回值
            """Return a 2-tuple containing (new_string, number).

###
    re.finditer(pattern, string, flags=0)
        功能
            查找正则匹配内容
        参数
            pattern 正则表达式
            string  目标字符串
            flags  标志位
        返回值
            返回一个迭代对象，迭代到的内容是一个match对象

###
    re.fullmatch(pattern, string, flags=0):
        功能
            完全匹配一个字符串
        参数
            pattern 正则表达式
            string  目标字符串
            flags  标志位
        返回值
            返回一个match对象，如果没有匹配返回None

###
    re.match(pattern, string, flags=0):
        功能
            从开头位置匹配一个字符串
        参数
            pattern 正则表达式
            string  目标字符串
            flags  标志位
        返回值
            返回一个match对象，如果没有匹配返回None

###
    re.search(pattern, string, flags=0)
       功能
           匹配一个字符串, 只匹配第一处
        参数
            pattern 正则表达式
            string  目标字符串
            flags  标志位
        返回值
            返回一个match对象
            如果没有匹配返回None

compile 对象属性
    flags: 标志位
    pattern： 正则表达式
    groups: 子组个数
    groupindex: 获取捕获组字典，键为组名，值为第几组


作业
    1. 熟悉元字符使用
    2. 使用complie对象调用正则表达式方法
    3. 读取一个文本，
            × 分别匹配文本中所有的以大写字母开头的单词，包含特殊字符不算
            × 数字， 包括整数，小数，负数，分数，百分数


#########
    match 对象属性
        属性
            pos
            endpos
            re
            lastgroup
            lastindex

        方法
            span()
            start()  匹配内容的开始位置
            end()  匹配内容的结束位置
            group()
                获取match对象获取的内容
                参数：
                    默认为0, 表示获取正则匹配的内容
                    如果为序列号或者为子组名则为对应的子组匹配到的内容。
                返回值
                    匹配到的字符串
            groupdict()
            groups()
        例子：
            match.py


flags 参数的使用
    re.compile    re.findall()   re.search()    re.match()
    re.finditer()  re.fullmatch()  re.sub()   re.split()

    作用
        辅助正则表达式，丰富匹配结果
    I == IGNORECASE    匹配时忽略字母的大小写
    S == DOTALL        作用于元字符. 让点可以匹配换行
    M == MULTILINE     作用于^  $, 使其可以匹配每一行开头结尾位置
    X == VERBOSE（冗长的）       可以给正则添加注释

    使用多个标识位使用按位或链接
        re.I | re.S

